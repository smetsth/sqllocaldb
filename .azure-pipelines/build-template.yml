parameters:
  agentOS: 'Windows'
  phaseName: ''
  queueName: ''
  buildArgs: ''
  beforeBuild: []
  afterBuild: []
  variables: {}
  dependsOn: ''

phases:
  - phase: ${{ coalesce(parameters.phaseName, parameters.agentOS) }}
    dependsOn: ${{ parameters.dependsOn }}
    displayName: ${{ coalesce(parameters.phaseName, parameters.agentOS) }}
    queue:
      ${{ if ne(parameters.queueName, '') }}:
        name: ${{ parameters.queueName }}
      ${{ if and(eq(parameters.queueName, ''), eq(parameters.agentOS, 'Linux')) }}:
        name: Hosted Linux Preview
      ${{ if and(eq(parameters.queueName, ''), eq(parameters.agentOS, 'macOS')) }}:
        name: Hosted macOS Preview
      ${{ if and(eq(parameters.queueName, ''), eq(parameters.agentOS, 'Windows')) }}:
        name: Hosted VS2017
    variables:
      AgentOSName: ${{ parameters.agentOS }}
      BuildArgs: ${{ parameters.buildArgs }}
      ${{ insert }}: ${{ parameters.variables }}
    steps:
      - ${{ parameters.beforeBuild }}
      - ${{ if eq(parameters.agentOS, 'Linux') }}:
        - script: |
            apt-get update
            apt-get install -y --no-install-recommends gettext libcurl4-openssl-dev libicu-dev libssl-dev libunwind8
          name: InstallDotNetCoreDeps
          displayName: Install .NET Core pre-requisites
      - ${{ if eq(parameters.agentOS, 'Windows') }}:
        - powershell: |
            choco install sqllocaldb
          name: InstallSQLServerLocalDB
          displayName: Install SQL Server LocalDB
      - ${{ if eq(parameters.agentOS, 'Windows') }}:
        - powershell: |
            .\Build.ps1 -OutputPath $(Build.StagingDirectory) $(BuildArgs)
          name: BuildAndTest
          displayName: Build and test
          env:
            DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
            NUGET_XMLDOC_MODE: skip
      - ${{ if ne(parameters.agentOS, 'Windows') }}:
        - script: |
            ./build.sh --output $(Build.StagingDirectory) $(BuildArgs)
          name: BuildAndTest
          displayName: Build and test
          env:
            DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
            NUGET_XMLDOC_MODE: skip
      - task: PublishTestResults@2
        name: PublishTests
        displayName: Publish test results
        condition: always()
        inputs:
          testRunner: VSTest
          testRunTitle: Unit and integration tests ($(AgentOSName))
          testResultsFiles: $(Build.SourcesDirectory)/**/*.trx
      - ${{ if eq(parameters.agentOS, 'Windows') }}:
        - task: PublishCodeCoverageResults@1
          name: PublishCodeCoverage
          displayName: Publish code coverage
          condition: always()
          inputs:
            codeCoverageTool: cobertura
            reportDirectory: $(Build.StagingDirectory)/**/coverage
            summaryFileLocation: $(Build.StagingDirectory)/**/Cobertura.xml
      - task: PublishBuildArtifacts@1
        displayName: Publish build artifacts
        condition: eq(variables['System.PullRequest.IsFork'], false)
        inputs:
          PathToPublish: '$(Build.StagingDirectory)'
          ArtifactType: Container
          ${{ if eq(parameters.artifacts.name, '') }}:
            ArtifactName: BuildDrop-$(AgentOSName)
          ${{ if ne(parameters.artifacts.name, '') }}:
            ArtifactName: ${{ parameters.artifacts.name }}
      - ${{ parameters.afterBuild }}
